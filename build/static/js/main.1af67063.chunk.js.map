{"version":3,"sources":["images/portrait.png","images/landscape.png","constants.js","components/progress.jsx","components/icons.jsx","components/app.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GUIDELINE","progressHeight","controlsBackgroundColor","controlsColor","iconSize","animationSpeed","ProgressWrapper","styled","div","_templateObject","ProgressBar","_templateObject2","Progress","_ref","progress","react_default","a","createElement","style","width","Icon","icons_templateObject","Close","onClick","href","xmlns","viewBox","focusable","fill","points","GlobalStyle","createGlobalStyle","app_templateObject","PageWrapper","app_templateObject2","ImageWrapper","_templateObject3","Image","_templateObject4","portrait","landscape","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loop","interval1","setInterval","state","setState","stop","clearTimeout","start","_this$state","react","components_progress","icons_Close","Component","Boolean","window","location","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0MCQzBC,EARG,CAChBC,eAAgB,OAChBC,wBAAyB,qBACzBC,cAAe,4BACfC,SAAU,OACVC,eAAgB,6PCClB,IAAMC,EAAkBC,IAAOC,IAAVC,IACLT,EAAUE,wBACdF,EAAUC,gBAEhBS,EAAcH,IAAOC,IAAVG,IACDX,EAAUG,eAcXS,EAVE,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACfC,EAAAC,EAAAC,cAACX,EAAD,KACES,EAAAC,EAAAC,cAACP,EAAD,CAAaQ,MAAO,CAAEC,MAAOL,EAAW,iMCX5C,IAAMM,EAAOb,IAAOS,EAAVK,IAICrB,EAAUG,cACLH,EAAUE,wBACfF,EAAUI,SACTJ,EAAUI,UAGTkB,EAAQ,SAAAT,GAAA,IAAGU,EAAHV,EAAGU,QAAH,OACnBR,EAAAC,EAAAC,cAACG,EAAD,CACEI,KAAK,IACLD,QAASA,GAETR,EAAAC,EAAAC,cAAA,OACEQ,MAAM,6BACNC,QAAQ,cACRC,UAAU,SACVZ,EAAAC,EAAAC,cAAA,WACEW,KAAK,UACLC,OAAO,ylCChBf,IAAMC,EAAcC,YAAHC,KAOXC,EAAc1B,IAAOC,IAAV0B,KAMXC,EAAe5B,IAAOC,IAAV4B,KAOZC,EAAQ9B,IAAOC,IAAV8B,IAEgBtC,EAAUC,eAEfsC,IAKkBvC,EAAUC,eACvBD,EAAUC,eACfuC,KAqDPC,cA/Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,KAAO,WACLP,EAAKQ,UAAYC,YAAY,WACC,MAAxBT,EAAKU,MAAMvC,UACb6B,EAAKW,SAAS,CAAEC,MAAM,IACtBC,aAAab,EAAKQ,YAElBR,EAAKW,SAAS,CAAExC,SAAU6B,EAAKU,MAAMvC,SAAW,KAEjDd,EAAUK,iBAjBIsC,EAwBnBc,MAAQ,WACNd,EAAKW,SAAS,CAAExC,SAAU,EAAGyC,MAAM,IACnCZ,EAAKO,QAvBLP,EAAKU,MAAQ,CACXvC,SAAU,EACVyC,MAAM,GALSZ,mFAqBjBG,KAAKI,wCAQE,IAAAQ,EACoBZ,KAAKO,MAAxBvC,EADD4C,EACC5C,SAAUyC,EADXG,EACWH,KAElB,OACExC,EAAAC,EAAAC,cAAC0C,EAAA,SAAD,KACE5C,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACgB,EAAD,KACElB,EAAAC,EAAAC,cAACkB,EAAD,KACEpB,EAAAC,EAAAC,cAACoB,EAAD,OAEFtB,EAAAC,EAAAC,cAAC2C,EAAD,CAAU9C,SAAUA,IAClByC,GAAQxC,EAAAC,EAAAC,cAAC4C,EAAD,CAAOtC,QAASuB,KAAKW,iBAzCvBK,aCnCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1af67063.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/portrait.32be516d.png\";","module.exports = __webpack_public_path__ + \"static/media/landscape.d3570a7a.png\";","const GUIDELINE = {\n  progressHeight: '10px', // высота полосы прогресса в нижней части экрана\n  controlsBackgroundColor: 'rgba(0, 0, 0, 50%)', // фон контролов\n  controlsColor: 'rgba(255, 255, 255, 100%)', // цвет контролов\n  iconSize: '40px', // размер иконки,\n  animationSpeed: 30, // скрорость прогресса\n}\n\nexport default GUIDELINE;\n","import React from \"react\";\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport GUIDELINE from '../constants';\n\nconst ProgressWrapper = styled.div`\n  background: ${GUIDELINE.controlsBackgroundColor};\n  height: ${GUIDELINE.progressHeight};\n`\nconst ProgressBar = styled.div`\n  background: ${GUIDELINE.controlsColor};\n  height: 100%;\n`\n\nconst Progress = ({ progress }) => (\n  <ProgressWrapper>\n    <ProgressBar style={{ width: progress + '%' }} ></ProgressBar>\n  </ProgressWrapper>\n);\n\nProgress.propTypes = {\n  progress: PropTypes.number.isRequired\n};\n\nexport default Progress;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport GUIDELINE from '../constants';\n\nconst Icon = styled.a`\n  position: absolute;\n  top: 0;\n  right: 0;\n  color: ${GUIDELINE.controlsColor};\n  background: ${GUIDELINE.controlsBackgroundColor};\n  width: ${GUIDELINE.iconSize};\n  height: ${GUIDELINE.iconSize};\n`\n\nexport const Close = ({ onClick }) => (\n  <Icon\n    href=\"#\"\n    onClick={onClick}\n    >\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 100 100\"\n      focusable=\"false\">\n      <polygon\n        fill=\"#FFFFFF\"\n        points=\"87.246,16.412 83.711,12.877 50.123,46.465 16.535,12.877 13,16.412 46.588,50 13,83.588\n        16.535,87.123 50.123,53.535 83.71,87.123 87.246,83.588 53.658,50 \"/>\n    </svg>\n  </Icon>\n);\n\nClose.propTypes = {\n  onClick: PropTypes.func.isRequired\n};\n\nconst Icons = {\n  Close,\n}\n\nexport default Icons;\n","import React, { Component, Fragment } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\n\nimport GUIDELINE from '../constants';\n\nimport portrait from '../images/portrait.png';\nimport landscape from '../images/landscape.png';\n\nimport Progress from './progress';\nimport { Close } from './icons';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    color: white;\n    background-color: gray;\n  }\n`\nconst PageWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n`\nconst ImageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n`\n\nconst Image = styled.div`\n  @media only screen and (orientation: portrait) {\n    height: calc(100vh - ${GUIDELINE.progressHeight});\n    width: calc(33/49 * 100vmax);\n    background: url(${portrait}) 50% 50% no-repeat;\n    background-size: contain;\n  }\n\n  @media only screen and (orientation: landscape) {\n    width: calc(129/77 * calc(100vh - ${GUIDELINE.progressHeight}));\n    height: calc(100vh - ${GUIDELINE.progressHeight});\n    background: url(${landscape}) 50% 50% no-repeat;\n    background-size: contain;\n  }\n`\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      progress: 0,\n      stop: false,\n    };\n  }\n\n  loop = () => {\n    this.interval1 = setInterval(() => {\n      if (this.state.progress === 100) {\n        this.setState({ stop: true });\n        clearTimeout(this.interval1);\n      } else {\n        this.setState({ progress: this.state.progress + 1 });\n      }\n    }, GUIDELINE.animationSpeed);\n  }\n\n  componentDidMount() {\n    this.loop();\n  }\n\n  start = () => {\n    this.setState({ progress: 0, stop: false });\n    this.loop();\n  }\n\n  render() {\n    const { progress, stop } = this.state;\n\n    return (\n      <Fragment>\n        <GlobalStyle />\n        <PageWrapper>\n          <ImageWrapper>\n            <Image />\n          </ImageWrapper>\n          <Progress progress={progress} />\n          { stop && <Close onClick={this.start} /> }\n        </PageWrapper>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}